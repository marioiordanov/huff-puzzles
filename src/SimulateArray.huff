#include "./Console.huff"
/**
 *  SUM_ARRAY HUFF EXERCISE
 *
 * In this puzzle, the task is to simulate an array in Huff using the "exact" storage pattern as solidity. Expected functions can;
 *      - Push numbers onto a array,
 *      - Pop the last index from the array,
 *      - View what's stored at an index,
 *      - Gets the length of the array,
 *      - Write to an index if it is valid.
 *
 *      - Writes and reads outside of length revert.
 *      - Popping off a zero length array reverts.
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

 #define function pushh(uint256 num) payable returns()
 #define function popp() payable returns()
 #define function read(uint256 index) payable returns(uint256)
 #define function length() payable returns(uint256)
 #define function write(uint256 index, uint256 num) payable returns()

 #define error OutOfBounds()
 #define error ZeroArray()

 #define macro MAIN() = takes(0) returns(0) {
    0x00 calldataload 0xE0 shr
    dup1 __FUNC_SIG(pushh) eq pushh jumpi
    dup1 __FUNC_SIG(popp) eq popp jumpi
    dup1 __FUNC_SIG(read) eq read jumpi
    dup1 __FUNC_SIG(length) eq length jumpi
    dup1 __FUNC_SIG(write) eq write jumpi
    0x00 0x00 revert


    pushh:
        PUSHH()
    popp:
        POPP()
    read:
        READ()
    length:
        LENGTH()
    write:
        WRITE()
 }

#define macro PUSHH() = takes(0) returns(0) {
    0x04 calldataload // [num]
    ARRAY_LENGTH() // s:[length, num]
    dup1 // [length, length,num]
    0x01 add // [length + 1, length,num]
    0x00 sstore // store the new length in slot 0 s: [length,num]
    ARRAY_SLOT_AT_INDEX() // [slot,num]
    sstore
    0x00 0x00 return
}

#define macro POPP() = takes(0) returns(0) {
    ARRAY_LENGTH()
    dup1
    iszero
    error jumpi

    // s: [length]
    0x01 // [1, length]
    swap1 // [length, 1]
    sub // [length - 1]
    dup1 // [length - 1, length - 1]
    ARRAY_SLOT_AT_INDEX() // [slot, length - 1]
    0x00 // [0, slot, length - 1]
    swap1 // [slot, 0, length - 1]
    sstore // stores 0x00 in the element slot
    0x00 // [0, length - 1]
    sstore // stores the new length in slot 0

    0x00 0x00 return

    error:
     __ERROR(ZeroArray) 0x00

    0x04 0x00 revert
}

#define macro READ() = takes(0) returns(0) {
   0x04 calldataload // [index]
   dup1 // [index, index]
   ARRAY_LENGTH() // [length, index, index] index >= length or length > index
    gt iszero error jumpi // [index]
    ARRAY_SLOT_AT_INDEX() // [slot]
    sload
    0x00 mstore
    0x20 0x00 return

    error:
     __ERROR(OutOfBounds)
    0x00 mstore

    0x04 0x00 revert
}

#define macro LENGTH() = takes(0) returns(0) {
    ARRAY_LENGTH() 0x00 mstore
    0x20 0x00 return
}

#define macro WRITE() = takes(0) returns(0) {
    0x24 calldataload // [num]
    0x04 calldataload // [index, num]
    dup1 // [index, index, num]
    ARRAY_LENGTH() // [length, index, index, num] index >= length or length > index
    gt iszero error jumpi // [index, num]
    ARRAY_SLOT_AT_INDEX() // [slot, num]
    sstore
    0x00 0x00 return

    error:
     __ERROR(OutOfBounds)
    0x00 mstore

    0x04 0x00 revert
}

#define macro ARRAY_SLOT() = takes(0) returns(1) {
    0x00 0x00 mstore // store 0x00 in 0x00-0x20 in memory
    0x20 0x00 sha3 // hash of the data in memory and put it on the stack
}

#define macro ARRAY_SLOT_AT_INDEX() = takes(1) returns(1) {
    0x20 // [0x20, index]
    mul // [0x20 * index]
    ARRAY_SLOT() // [slot, 0x20*index]
    add // [slot + 0x20*index]
}

#define macro ARRAY_LENGTH() = takes(0) returns(1) {
    0x00 sload // load data from slot 0 from storage and put it on the stack
}
